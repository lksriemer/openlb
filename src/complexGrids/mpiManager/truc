namespace singleton {

template <>
void MpiManager::send<int>(int *buf, int count, int dest, int tag, MPI_Comm comm);
template <>
void MpiManager::send<double>(double *buf, int count, int dest, int tag, MPI_Comm comm);

template <>
MPI_Request MpiManager::iSend<int> (int *buf, int count, int dest, int tag, MPI_Comm comm);
template <>
MPI_Request MpiManager::iSend<double> (double *buf, int count, int dest, int tag, MPI_Comm comm);

template <>
void MpiManager::receive<int>(int *buf, int count, int source, int tag, MPI_Comm comm);
template <>
void MpiManager::receive<double>(double *buf, int count, int source, int tag, MPI_Comm comm);

template <>
MPI_Request MpiManager::iRecv<int>(int *buf, int count, int source, int tag, MPI_Comm comm);
template <>
MPI_Request MpiManager::iRecv<double>(double *buf, int count, int source, int tag, MPI_Comm comm);

template <>
void MpiManager::sendRecv<int>
    (int *sendBuf, int *recvBuf, int count, int dest, int source, int tag, MPI_Comm comm);
template <>
void MpiManager::sendRecv<double>
    (double *sendBuf, double *recvBuf, int count, int dest, int source, int tag, MPI_Comm comm);

template <>
void MpiManager::scatterv_impl<int>(int* sendBuf, int* sendCounts, int* displs,
                                    int* recvBuf, int recvCount, int root, MPI_Comm comm);
template <>
void MpiManager::scatterv_impl<double>(double* sendBuf, int* sendCounts, int* displs,
                                       double* recvBuf, int recvCount, int root, MPI_Comm comm);


template <>
void MpiManager::gatherv_impl<int>(int* sendBuf, int sendCount,
                                   int* recvBuf, int* recvCounts, int* displs,
                                   int root, MPI_Comm comm);
template <>
void MpiManager::gatherv_impl<double>(double* sendBuf, int sendCount,
                                      double* recvBuf, int* recvCounts, int* displs,
                                      int root, MPI_Comm comm);

template <>
void MpiManager::bCast<int>(int* sendBuf, int sendCount, int root, MPI_Comm comm);
template <>
void MpiManager::bCast<double>(double* sendBuf, int sendCount, int root, MPI_Comm comm);

template <>
void MpiManager::reduce<int>(int sendVal, int& recvVal,  MPI_Op op, int root, MPI_Comm comm);
template <>
void MpiManager::reduce<double>(double sendVal, double& recvVal,  MPI_Op op, int root, MPI_Comm comm);


template <>
void MpiManager::reduceVect<int>(std::vector<int>& sendVal, std::vector<int>& recvVal,
                                 MPI_Op op, int root, MPI_Comm comm);
template <>
void MpiManager::reduceVect<double>(std::vector<double>& sendVal, std::vector<double>& recvVal,
                                    MPI_Op op, int root, MPI_Comm comm);


template <>
void MpiManager::reduceAndBcast<int>(int& reductVal, MPI_Op op, int root, MPI_Comm comm);
template <>
void MpiManager::reduceAndBcast<double>(double& reductVal, MPI_Op op, int root, MPI_Comm comm);

} // namespace singleton


